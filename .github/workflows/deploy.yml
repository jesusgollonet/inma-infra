name: Deploy

on:
  push:
    branches:
      - 16-backup-strategy

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install dependencies
      working-directory: ./infra
      run: npm install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1 
    - name: Set up Pulumi
      uses: pulumi/actions@v5
      with:
        command: up
        stack-name: inma
        work-dir: ./infra
      env:
        HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    - name: Get bucket name
      id: get_bucket_name
      working-directory: ./infra
      run: echo "bucketName=$(pulumi stack output bucketName)" > bucketName.txt 
    - name: Upload bucketName 
      uses: actions/upload-artifact@v4
      with:
        name: bucketName
        path: bucketName.txt 
    - name: Use bucket name
      run: echo "The bucket name is ${{ env.bucketName }}"
  deploy:
    runs-on: ubuntu-latest
    needs: provision
    steps:
    - name: Download math result for job 1
      uses: actions/download-artifact@v4
      with:
        name: bucketName
    - shell: bash
      run: |
        cat bucketName.txt >> "$GITHUB_ENV"
        echo "$GITHUB_ENV"
        echo ${{ env.bucketName }}
    - uses: actions/checkout@v3
    - name: sync app files 
      uses: burnett01/rsync-deployments@6.0.0
      with:
        switches: -Pav 
        path: app/ 
        remote_path: /root/app/
        remote_host: ${{ secrets.SERVER_IP }} 
        remote_user: root
        remote_key: ${{ secrets.SSH_KEY }}
    - name: start docker compose 
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }} 
        username: root
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /root/app
          echo "WP1_HOSTNAME=${{ secrets.WP1_HOSTNAME }}" > .env
          echo "WORDPRESS_DB_HOST=${{ secrets.WORDPRESS_DB_HOST }}" >> .env
          echo "WORDPRESS_DB_USER=${{ secrets.WORDPRESS_DB_USER }}" >> .env
          echo "WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}" >> .env
          echo "WORDPRESS_DB_NAME=${{ secrets.WORDPRESS_DB_NAME }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "BACKUP_BUCKET_NAME=${{ env.bucketName }}" >> .env

          sudo docker compose up -d --no-deps --build --remove-orphans
